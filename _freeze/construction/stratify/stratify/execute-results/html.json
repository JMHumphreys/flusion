{
  "hash": "e4d0d43a5b431c23e302b7c64f47fab5",
  "result": {
    "markdown": "---\ntitle: \"Age Stratification\"\ndate: \"2023-06-13\"\ncategories: [R, statistical inference]\ndescription: \"Post modeling analysis for naive age stratification\"\nformat:\n  html:\n    df-print: kable\n    code-fold: show\n    code-summary: \"Hide code\"\n    code-overflow: wrap\n    toc-title: Page Contents\n    toc: true\n    toc-depth: 2\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    css: styles.css\n    theme: flatly\n    smooth-scroll: true\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style type=\"text/css\">\n\nbody, td {\n   font-size: 13pt;\n}\ncode.r{\n  font-size: 9pt;\n}\npre {\n  font-size: 11pt\n}\n</style>\n```\n\n\n# Overview  \nThis analysis utilizes FluSurv data to first estimate weekly and age class specific influenza rates for the period 2010-2023, then second, to apply estimated rates to flusion data to approximate date, location, and age group specific influenza hospitalizations.  Because FluSurv only provides data for 18 states, rate modeling includes covariates to account for time and location sampling biases within a time series model.       \n\n## Libraries\n\n::: {.cell}\n\n```{.r .cell-code}\n#wrangling\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(data.table, include.only = \"fread\")\nlibrary(cdcfluview)\n\n#spatial\nlibrary(CovidCAR)\n\n#inference\nlibrary(INLA)\n\noptions(dplyr.summarise.inform = FALSE, show_col_types = FALSE)\n```\n:::\n\n\n## Age Tables  \nCreating a crosswalk to match FluSurv age groups to those in US Census data.  US Census data is used as a *random slopes* type predictor in the time series model to provide age-specfic offsets.      \n\n::: {.cell}\n\n:::\n\nNote: Census codes were queried using the **censusapi** package.  This work is shown in the non-rendered version of this document in the GitHub repository.   \n\n::: {.cell}\n\n```{.r .cell-code}\ndemog_table  <- as.data.frame(\n  cbind(\n    census_classes = c(1, 6:18, 20, 21, 23),\n    flsv_classes = c(\"0-4 yr\", \"18-29 yr\", \"30-39 yr\", \"30-39 yr\", \"40-49 yr\", \"40-49 yr\", \"50-64 yr\",\n                     \"50-64 yr\", \"50-64 yr\", \"65-74 yr\", \"65-74 yr\", \"75-84 yr\", \"75-84 yr\", \"85+\",\n                     \"5-17 yr\", \"5-17 yr\", \"18-29 yr\")\n  )\n)\n\ndemog_table\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|census_classes |flsv_classes |\n|:--------------|:------------|\n|1              |0-4 yr       |\n|6              |18-29 yr     |\n|7              |30-39 yr     |\n|8              |30-39 yr     |\n|9              |40-49 yr     |\n|10             |40-49 yr     |\n|11             |50-64 yr     |\n|12             |50-64 yr     |\n|13             |50-64 yr     |\n|14             |65-74 yr     |\n|15             |65-74 yr     |\n|16             |75-84 yr     |\n|17             |75-84 yr     |\n|18             |85+          |\n|20             |5-17 yr      |\n|21             |5-17 yr      |\n|23             |18-29 yr     |\n\n</div>\n:::\n:::\n\n\n\n## FluSurv Data   \nThe *hospitalizations()* function from the **cdcfluview** package does most of the work by querying [FluView](https://gis.cdc.gov/GRASP/Fluview/FluHospRates.html), but seems only to be able to take small bites at a time.   \n\n::: {.cell}\n\n```{.r .cell-code}\nmyRegions <- surveillance_areas() \n\nflusurv <- do.call(rbind, lapply(seq_len(dim(myRegions)[1]), function(i) {\n  hospitalizations(surveillance_area = myRegions$surveillance_area[i], region = myRegions$region[i])\n}))\n\n#save copy\n#write.csv(flusurv, \"./2033-06-01-data/flusurv_query.csv\", row.names = FALSE)\n#write.csv(flusurv, \"./2033-06-01-data/flusurv_all.csv\", row.names = FALSE) #Entire Network\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflusurv <- fread(\"D:/Github/flusion/data/flusurv_all.csv\") %>%\n  filter(age_label %in% unique(demog_table$flsv_classes), #age classes\n         region != \"Entire Network\", #states only\n         year >= 2010 & year <= 2019) %>% #the pkg fails on dates after 2020,ugh\n  mutate(age_class = age_label,\n         location_name = region,\n         network = surveillance_area,\n         weeklyrate = as.numeric(weeklyrate),\n         epiweek = year_wk_num) %>%\n    select(location_name, year, epiweek, network, weeklyrate, age_class)\n\n#manual download from site 2023-06-01\nflusurv_2020 <- fread(\"D:/Github/flusion/data/FluSurveillance_2020.csv\") %>%\n  rename_all(~gsub(\" |-\", \"\", .)) %>%\n  filter(AGECATEGORY %in% unique(demog_table$flsv_classes), #ages to keep\n         SEXCATEGORY == \"Overall\", #all sexes\n         RACECATEGORY == \"Overall\",\n         WEEKLYRATE != \"null\",\n         CATCHMENT != \"Entire Network\", #states only\n         MMWRYEAR >= 2020) %>% #the pkg fails on dates after 2020,ugh\n  mutate(age_class = AGECATEGORY,\n         location_name = CATCHMENT,\n         network = NETWORK,\n         year = MMWRYEAR,\n         epiweek = MMWRWEEK,\n         rate = CUMULATIVERATE,\n         weeklyrate = as.numeric(WEEKLYRATE)) %>%\n    select(location_name, year, epiweek, network, weeklyrate, age_class)\n\n#Join date ranges\nflusurv = rbind(flusurv, flusurv_2020)\nflusurv$weeklyrate.s <- log(flusurv$weeklyrate + 0.0001)\n\nflusurv$location_name[flusurv$location_name == \"New York - Albany\"] = \"New York\"\nflusurv$location_name[flusurv$location_name == \"New York - Rochester\"] =\"New York\"\n\nflusurv <- as.data.frame(\n  flusurv %>%\n  group_by(location_name, year, epiweek, age_class) %>%\n  summarise(weeklyrate = mean(weeklyrate, na.rm=T),\n            weeklyrate.s = mean(weeklyrate.s, na.rm=T))\n)\n\n\nunique(duplicated(flusurv))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nhead(flusurv)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|location_name | year| epiweek|age_class | weeklyrate| weeklyrate.s|\n|:-------------|----:|-------:|:---------|----------:|------------:|\n|California    | 2010|       1|0-4 yr    |        0.5|   -0.6929472|\n|California    | 2010|       1|18-29 yr  |        0.3|   -1.4972664|\n|California    | 2010|       1|30-39 yr  |        0.4|   -0.9160408|\n|California    | 2010|       1|40-49 yr  |        0.0|   -9.2103404|\n|California    | 2010|       1|5-17 yr   |        0.2|   -1.6089380|\n|California    | 2010|       1|50-64 yr  |        0.5|   -0.6929472|\n\n</div>\n:::\n:::\n\n\n\n## Demographic Data  \nUS population estimates by state and age group from the U.S. Census Bureau\n\n::: {.cell}\n\n```{.r .cell-code}\nall_pop <- censusapi::getCensus(key = get_api(\"censusapi\"),\n                                name = \"pep/charagegroups\",\n                                vars = c('AGEGROUP','POP'),\n                                vintage = \"2018\",\n                                region = \"state:*\") %>%\n  filter(AGEGROUP %in% unique(demog_table$census_classes)) %>%\n  mutate(location = state,\n         pop_age = POP,\n         census_classes = AGEGROUP) %>%\n  select(-c(state, AGEGROUP, POP))\n\nall_pop$age_class <- with(demog_table,\n                       flsv_classes[match(\n                           all_pop$census_classes,\n                                   census_classes)])\n\n\nall_pop <- as.data.frame(\n  all_pop %>%\n  group_by(location, age_class) %>%\n  summarise(pop_age = sum(pop_age))\n)\n```\n:::\n\n\n\n## Read FIPS codes  \nState FIPS numbers to match Census and FluSurv data.  This file was created during [Preprocessing](https://jmhumphreys.github.io/flusion/construction/preprocessing/preprocessing.html).    \n\n::: {.cell}\n\n```{.r .cell-code}\nlocations <- fread(\"D:/Github/flusion/data/locations.csv\") %>%\n  select(-c(count_rate1per100k, count_rate2per100k)) %>%\n  filter(location_name != \"US\") #\n```\n:::\n\n\nMatch FIPS to data.\n\n::: {.cell}\n\n```{.r .cell-code}\nall_pop <- left_join(all_pop, locations, by = \"location\") %>%\n  filter(location_name %in% unique(flusurv$location_name))\n\nunique(duplicated(flusurv[,c(\"location_name\", \"age_class\", \"epiweek\",\"year\")]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ncomb_data <- left_join(flusurv, all_pop, by = c(\"location_name\", \"age_class\"))\n\n#date\ncomb_data$date <- MMWRweek::MMWRweek2Date(comb_data$year, comb_data$epiweek, 7)\n```\n:::\n\n\n\n## Expand Dates  \nFluSurv reports are not available for many dates within the analysis period, partculary outside of the primary flu season.  Because the goal is to estimate continuous rate variation,  a data frame is created listing all dates is created.    \n    \n### Get Fusion Data  \nNeed current date range in flusion data so that results here can be later matched. Flusion_v1 does not include age structure.  \n\n::: {.cell}\n\n```{.r .cell-code}\n#function to downlaod file\nget_data <- function(url) {\n  df <- read_csv(url)\n  return(df)\n}\n\nflusion_url <- \"https://github.com/JMHumphreys/flusion/raw/main/flusion/flusion_v1.csv\"\nflusion <- get_data(flusion_url)\n\nhead(flusion)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|date       | year| epiweek|abbreviation |location |location_name | q_0.025| q_0.25| q_0.50| q_0.75| q_0.975|\n|:----------|----:|-------:|:------------|:--------|:-------------|-------:|------:|------:|------:|-------:|\n|2010-10-09 | 2010|      40|AL           |01       |Alabama       |    0.13|   0.43|   0.80|   1.48|    4.83|\n|2010-10-09 | 2010|      40|AK           |02       |Alaska        |    0.04|   0.14|   0.26|   0.48|    1.58|\n|2010-10-09 | 2010|      40|AZ           |04       |Arizona       |    2.68|   8.71|  16.12|  29.72|   93.15|\n|2010-10-09 | 2010|      40|AR           |05       |Arkansas      |    0.08|   0.25|   0.47|   0.87|    2.82|\n|2010-10-09 | 2010|      40|CA           |06       |California    |    1.81|   5.89|  10.93|  20.24|   64.55|\n|2010-10-09 | 2010|      40|CO           |08       |Colorado      |    1.12|   3.65|   6.77|  12.55|   40.19|\n\n</div>\n:::\n:::\n\n\nCreate a date vector to capture the entire date range for each age class.  \n\n::: {.cell}\n\n```{.r .cell-code}\nmin_date <- min(flusion$date) #flusion date\nmax_date <- max(comb_data$date) #FluSurv date\ndate_range <- seq(min_date, max_date, by = \"1 week\")\n\ncomb_data <- comb_data %>%\n  filter(date >= min_date & date <= max_date)\n\nflusion_cut <- flusion %>%\n  filter(date >= min_date & date <= max_date)\n\ndate_age_tab = as.data.frame(rep(unique(demog_table$flsv_classes), length(date_range)))\nnames(date_age_tab) = \"age_class\"\ndate_age_tab$date <- rep(unique(date_range), length(unique(demog_table$flsv_classes)))\n\n\ngrid_expand <- left_join(date_age_tab, comb_data, by = c(\"date\", \"age_class\"))\ngrid_expand$location_name = ifelse(is.na(grid_expand$location_name) == TRUE, \"unknown\", grid_expand$location_name)\n\n#FluSurv values were transformed to log scale  \ngrid_expand$weeklyrate.s <- ifelse(is.na(grid_expand$weeklyrate.s), log(0.0001), grid_expand$weeklyrate.s)\n```\n:::\n\n\n## Organize Data  \nVerifying that all variables needed for modeling are present. \n\n::: {.cell}\n\n```{.r .cell-code}\ngrid_expand <- grid_expand %>%\n  mutate(intercept = 1, \n         ts_weeks.1 = as.integer(as.factor(date)),\n         ts_weeks.2 = ts_weeks.1,\n         region.1 = as.integer(as.factor(location_name)),\n         class.1 = as.integer(as.factor(age_class)),\n         class.2 = class.1,\n         class.3 = class.1,\n         year = year(date),\n         year.int = as.integer(as.factor(year)),\n         l_age_pop = pop_age/10^5)\n\n# find average population across FluSurv's 18 states\npop_state_age <- comb_data %>%\n  group_by(age_class) %>%\n  summarise(mean_age_pop = mean(pop_age)/10^5) #rate/100k\n\ngrid_expand <- left_join(grid_expand, pop_state_age, by = c(\"age_class\"))\ngrid_expand$l_age_pop <- ifelse(grid_expand$location_name == \"unknown\", grid_expand$mean_age_pop, grid_expand$l_age_pop)\n```\n:::\n\n\n## Model\n\n::: {.cell}\n\n```{.r .cell-code}\n#prior\npc.prior = list(prec = list(prior=\"pc.prec\", #prior\n                            param = c(1, 0.5)))\n\n#formula\nform_age <- weeklyrate.s ~ -1 + #log-rate per 100k\n  f(ts_weeks.1,  #time series model           \n    constr=TRUE, #rw models perform well also \n    model=\"iid\", #iid more conservative\n    group = class.1, #age group specific\n    control.group=list(model=\"iid\"),\n    hyper= pc.prior) +\n  f(class.2,   #random intercepts for age-specific means\n    constr=TRUE,\n    model=\"iid\",\n    hyper=pc.prior) +\n  f(class.3, l_age_pop, #~random slopes for pop      \n   constr=TRUE,\n    model=\"iid\",\n    hyper=pc.prior) +\n  f(region.1,   #region level variation     \n    constr=TRUE,\n    model=\"iid\",\n    group = year.int, #year level variation\n    control.group=list(model=\"iid\"),\n    hyper=pc.prior) \n\n#run model\nage.mod = inla(form_age, #formula\n               data = grid_expand, #data \n               family = c(\"gaussian\"), #negative binomial\n               verbose = FALSE, \n               quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975),\n               control.fixed = list(prec = 1, \n                                    prec.intercept = 1), \n               control.predictor = list(\n                                  compute = TRUE, \n                                     link = 1), \n               control.inla = list(strategy = \"gaussian\", \n                              int.strategy = \"eb\"), \n               control.compute=list(dic = F, cpo = F, waic = F, config=F))\n\n\n#extract and scale results\nfitted_rates <- age.mod$summary.fitted.values[,3:7]\nnames(fitted_rates) <- c(\"q0.025\", \"q0.25\",\"q0.5\",\"q0.75\",\"q0.975\")\nfitted_rates <- apply(fitted_rates, 2, exp)\n```\n:::\n\n  \n## 2010-2023 Weekly Rates  \nView period of record rates.\n\n::: {.cell}\n\n```{.r .cell-code}\nesti_rates <- cbind(grid_expand, fitted_rates)\n\nesti_rates <- esti_rates %>%\n  group_by(date, age_class) %>%\n  summarise(q0.025 = median(q0.025),\n            q0.25 = median(q0.25),\n            q0.5 = median(q0.5),\n            q0.75 = median(q0.75),\n            q0.975 = median(q0.975))\n\nggplot(esti_rates, aes(date, q0.5,  group=age_class, col=age_class), fill=age_class) +\n   geom_line(linewidth = 1) +\n   viridis::scale_color_viridis(\"Age Group\",\n                             discrete=T,\n                             option = \"turbo\",\n                             direction = -1,\n                             na.value = \"white\") +\n    scale_x_date(date_breaks = \"6 month\", date_labels = \"%b-%d-%Y\") +\n    scale_y_continuous(breaks = scales::pretty_breaks(8), limits = c(0, 40)) +\n    xlab(\" \") +\n    ylab(\"Rate per 100,000\") + \n    ggtitle(\"Influenza Hospitalization\") +\n    theme_classic() +\n    theme(plot.margin = unit(c(1,0.5,1,0.5), \"cm\"),\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.background = element_blank(),\n      plot.background = element_blank(),\n      panel.border = element_blank(),\n      legend.title = element_text(size = 16, face = \"bold\", hjust=0.5),\n      legend.text = element_text(size=10, face=\"bold\"),\n      strip.text = element_text(size=16, face=\"bold\"),\n      strip.background = element_blank(),\n      legend.position = \"bottom\",\n      legend.direction = \"horizontal\",\n      legend.key.width = unit(2,\"line\"),\n      axis.text.y = element_text(face=\"bold\", size=12),\n      axis.text.x = element_text(face=\"bold\", size=10, angle = 60, hjust=1),\n      axis.title.x = element_text(size=18, face=\"bold\"),\n      axis.title.y = element_text(size=18, face=\"bold\"),\n      plot.title = element_text(size=25, face=\"bold\", hjust=0.5)) \n```\n\n::: {.cell-output-display}\n![](stratify_files/figure-html/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n\n\n\n  \n## 2022-2023 Weekly Rates  \nZoom in to view most recent season.  Snapshot for same period provided by FluSurv is below for comparison.         \n\n::: {.cell}\n\n```{.r .cell-code}\nxmin = as_date(\"2022-10-08\")\nxmax = as_date(\"2023-04-29\")\n\nggplot(esti_rates, aes(date, q0.5,  group=age_class, col=age_class), fill=age_class) +\n   geom_line(linewidth = 1) +\n   geom_point(size=1.5, pch=19) +\n   geom_hline(yintercept = 0, \n                linetype = \"solid\",\n                   colour = \"gray60\",\n                   linewidth = 0.75) +\n  viridis::scale_color_viridis(\"Age Group\",\n                             discrete=T,\n                             option = \"turbo\",\n                             direction = -1,\n                             na.value = \"white\") +\n    scale_x_date(date_breaks = \"2 week\", date_labels = \"%b-%d-%Y\", limits = c(xmin,xmax)) +\n    scale_y_continuous(breaks = scales::pretty_breaks(8), limits = c(0, 40)) +\n    xlab(\" \") +\n    ylab(\"Rate per 100,000\") + \n    ggtitle(\"Influenza Hospitalization\") +\n    theme_classic() +\n    theme(plot.margin = unit(c(2,0.5,2,0.5), \"cm\"),\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.background = element_blank(),\n      plot.background = element_blank(),\n      panel.border = element_blank(),\n      legend.title = element_text(size = 16, face = \"bold\", hjust=0.5),\n      legend.text = element_text(size=10, face=\"bold\"),\n      strip.text = element_text(size=16, face=\"bold\"),\n      strip.background = element_blank(),\n      legend.position = c(0.7, 0.5),\n      legend.direction = \"vertical\",\n      legend.key.width = unit(2,\"line\"),\n      axis.text.y = element_text(face=\"bold\", size=14),\n      axis.text.x = element_text(face=\"bold\", size=14, angle = 60, hjust=1),\n      axis.title.x = element_text(size=22, face=\"bold\"),\n      axis.title.y = element_text(size=22, face=\"bold\"),\n      plot.title = element_text(size=25, face=\"bold\", hjust=0.5)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 5634 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 5634 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](stratify_files/figure-html/unnamed-chunk-14-1.png){width=768}\n:::\n:::\n\n\nCompare the estimated values to those on [FluSurv](https://gis.cdc.gov/GRASP/Fluview/FluHospRates.html)\n![**Image from FluSurv**](flusurv.png){width=890%}\n\n## Age Stratification  \nApply rates estimated above to total incidence estimated by flusion data.  \n  \nFunction to apply rates (proportionally) and then join data sets.    \n\n::: {.cell}\n\n```{.r .cell-code}\n# function  \n# flusion data (flus_data) and estimated rates (rate_est) as inputs\nnaive_stratify <- function(flus_data, rate_est){\n  \n  #date range for analysis\n  min_date <- min(flus_data$date) #flusion date\n  max_date <- max(rate_est$date) #FluSurv date\n  \n  #age groups\n  age_grps <- unique(rate_est$age_class)\n  \n  # join flusion and rate estimates\n  for(i in 1:length(age_grps)){\n    \n     tmp.fuse = flus_data %>%\n       filter(date >= min_date & date <= max_date) %>%\n       mutate(age_class = age_grps[i])\n     \n     rate_est = rate_est %>%\n       filter(date >= min_date & date <= max_date)\n    \n    tmp.fuse = left_join(tmp.fuse, rate_est, by = c(\"date\", \"age_class\")) \n    \n    if(i == 1){\n      work_flus <- tmp.fuse\n    } else{work_flus <- rbind(work_flus, tmp.fuse)}\n  }\n   \n  #summed rate by date and location (all age groups)\n  fuse_weights <- work_flus %>% #national weekly sum\n    group_by(date, location_name) %>%\n    summarise(s0.025 = sum(q0.025),\n            s0.25 = sum(q0.25),\n            s0.5 = sum(q0.5),\n            s0.75 = sum(q0.75),\n            s0.975 = sum(q0.975))\n  \n  # join to data\n  work_flus <- left_join(work_flus, fuse_weights, by=c(\"date\", \"location_name\"))\n  \n  # calculate proportions and multiply by flusion estimates \n  prop_set <- work_flus %>%\n    group_by(date, location_name, age_class) %>%\n    mutate(n0.025 = q0.025/s0.025,\n           n0.25 = q0.25/s0.25,\n           n0.50 = q0.5/s0.5,\n           n0.75 = q0.75/s0.75,\n           n0.975 = q0.975/s0.975,\n           q_0.025 = q_0.025*n0.025,\n           q_0.25 = q_0.25*n0.25,\n           q_0.50 = q_0.50*n0.50,\n           q_0.75 = q_0.75*n0.75,\n           q_0.975 = q_0.975*n0.975) %>% #select rows to match with flusion\n    select(date, year,epiweek, abbreviation, location, location_name, age_class, q_0.025, q_0.25, q_0.50, q_0.75, q_0.975)\n  \n}\n```\n:::\n\n\nExecute function\n\n::: {.cell}\n\n```{.r .cell-code}\nflused_ages <- naive_stratify(flusion, esti_rates)\n```\n:::\n\n\n\n## 2010-2023 Stratified  \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(flused_ages, aes(date, q_0.50, fill=age_class), col = \"transparent\") +\n  geom_bar(position=\"stack\", stat=\"identity\") +\n   viridis::scale_fill_viridis(\"Age Group\",\n                             discrete=T,\n                             option = \"turbo\",\n                             direction = -1,\n                             na.value = \"white\") +\n    scale_x_date(date_breaks = \"6 month\", date_labels = \"%d-%Y\") +\n    xlab(\" \") +\n    ylab(\"Hospitalizations\") + \n    ggtitle(\" \") +\n    theme_classic() +\n    theme(plot.margin = unit(c(2,0.5,2,0.5), \"cm\"),\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.background = element_blank(),\n      plot.background = element_blank(),\n      panel.border = element_blank(),\n      legend.title = element_text(size = 16, face = \"bold\", hjust=0.5),\n      legend.text = element_text(size=10, face=\"bold\"),\n      strip.text = element_text(size=16, face=\"bold\"),\n      strip.background = element_blank(),\n      legend.position = \"bottom\",\n      legend.direction = \"horizontal\",\n      legend.key.width = unit(2,\"line\"),\n      axis.text.y = element_text(face=\"bold\", size=14),\n      axis.text.x = element_text(face=\"bold\", size=14, angle = 60, hjust=1),\n      axis.title.x = element_text(size=22, face=\"bold\"),\n      axis.title.y = element_text(size=22, face=\"bold\"),\n      plot.title = element_text(size=25, face=\"bold\", hjust=0.5)) \n```\n\n::: {.cell-output-display}\n![](stratify_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n:::\n\n\n## 2022-2023 Stratified  \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(flused_ages, aes(date, q_0.50, fill=age_class), col = \"transparent\") +\n  geom_bar(position=\"stack\", stat=\"identity\") +\n   viridis::scale_fill_viridis(\"Age Group\",\n                             discrete=T,\n                             option = \"turbo\",\n                             direction = -1,\n                             na.value = \"white\") +\n    scale_x_date(date_breaks = \"2 week\", date_labels = \"%b-%d-%Y\", limits = c(xmin,xmax)) +\n    xlab(\" \") +\n    ylab(\"Hospitalizations\") + \n    ggtitle(\" \") +\n    theme_classic() +\n    theme(plot.margin = unit(c(2,0.5,2,0.5), \"cm\"),\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.background = element_blank(),\n      plot.background = element_blank(),\n      panel.border = element_blank(),\n      legend.title = element_text(size = 16, face = \"bold\", hjust=0.5),\n      legend.text = element_text(size=10, face=\"bold\"),\n      strip.text = element_text(size=16, face=\"bold\"),\n      strip.background = element_blank(),\n      legend.position = c(0.7, 0.5),\n      legend.direction = \"vertical\",\n      legend.key.width = unit(2,\"line\"),\n      axis.text.y = element_text(face=\"bold\", size=14),\n      axis.text.x = element_text(face=\"bold\", size=14, angle = 60, hjust=1),\n      axis.title.x = element_text(size=22, face=\"bold\"),\n      axis.title.y = element_text(size=22, face=\"bold\"),\n      plot.title = element_text(size=25, face=\"bold\", hjust=0.5)) \n```\n\n::: {.cell-output-display}\n![](stratify_files/figure-html/unnamed-chunk-18-1.png){width=768}\n:::\n:::\n",
    "supporting": [
      "stratify_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}